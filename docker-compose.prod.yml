version: '3.8'

services:
  # API Service (Production)
  aml-api:
    build: .
    container_name: aml-api-prod
    ports:
      - "8000:8000"
    environment:
      - GNN_FRAMEWORK=pyg
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - AUTH_ENABLED=true
      - SECRET_KEY=${SECRET_KEY}
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=${DATABASE_URL}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - model_cache:/app/models
    command: ["python", "api/main.py"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - aml-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Dashboard Service (Production)
  aml-dashboard:
    build: .
    container_name: aml-dashboard-prod
    ports:
      - "8501:8501"
    environment:
      - GNN_FRAMEWORK=pyg
      - PYTHONPATH=/app
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    command: ["streamlit", "run", "dashboard/app.py", "--server.port=8501", "--server.address=0.0.0.0"]
    depends_on:
      aml-api:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - aml-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: aml-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - aml-network
    command: ["redis-server", "--appendonly", "yes", "--maxmemory", "1gb", "--maxmemory-policy", "allkeys-lru"]

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aml-postgres
    environment:
      - POSTGRES_DB=aml_engine
      - POSTGRES_USER=${DB_USER:-aml_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-aml_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - aml-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-aml_user} -d aml_engine"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: aml-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - aml-api
      - aml-dashboard
    restart: unless-stopped
    networks:
      - aml-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: aml-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - aml-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: aml-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - aml-network

  # Elasticsearch for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: aml-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - aml-network

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: aml-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - aml-network

networks:
  aml-network:
    driver: bridge

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  model_cache: 